* Data Structures:

    - A way of organizing data that is stored in a computer or database.
    - They all have different strengths and weaknesses.
    - Some are fast at storing and recording data, while others are not.
    - Some are fast at searching and retrieving data, others are not.

------------------------------------------------------------------------------------------------------------------------

* Constructor:

    - Its a function that creates Object class and allows us to create multiple instances of that class.

------------------------------------------------------------------------------------------------------------------------

* Linked List:

    - Its a list of elements called "nodes" that are linked together in a single file line.
    - It is a data structure consisting of a group of nodes which together represent a sequence.
    - Each node is composed of data and a reference (in other words, a link) to the next node in the sequence.
    - It allows for efficient insertion or removal of elements from any position in the sequence during iteration.
    - A drawback of linked lists is that access time is linear (and difficult to pipeline).
    - Faster access, such as random access, is not feasible.
    - Arrays have better cache locality as compared to linked lists.
    - Types of linked lists:
        - Singly Linked List.
            - Each node has reference to only next node or node after it.
        - Doubly Linked List.
            - Each node has references to previous and next nodes.

------------------------------------------------------------------------------------------------------------------------

* Big O Notation:

    - Big O notation is used to classify how scalable algorithm or function is.
    - In simple words, how long it will take to execute an algorithm based on input size.
    - "O" stands for the function or algorithm we are executing and "(n)" stands for the size of the input.
    - Examples:
        - Constant Runtime "O(1)". i.e. Runtime does not increase if the input is large.
        - Linear Runtime "O(n)". i.e. Runtime is proportional to size of the input.
        - Exponential Runtime "O(n^2)". i.e. Runtime increases exponentially with the size of an input.
        - Logarithmic Runtime "O(log n)". e.g. Binary Search. i.e. With every operation we perform, we are cutting the input in half.

------------------------------------------------------------------------------------------------------------------------

* LinkedList Performance:

    - For Adding and Removing items into LinkedList:
        - It has Constant Runtime time complexity. i.e. O(1).
        - It is because we are using head and tail to keep track of start and end of LinkedList.
        - And we will perform insert or remove operations only at head or tail locations.
    - For Searching an item in LinkedList:
        - It has Linear Runtime time complexity. i.e. O(n).
        - It is because in a worst case scenario, we will have to iterate through entire LinkedList to find the value.
        - As our LinkedList grows in size, our search function runtime will also increase.
        - O(n) is still an acceptable time complexity.
    - Memory management benifits:
        - Data doesn't have to be stored together.
            - For e.g. On hard disk, data is scattered in different locations but every data has pointers to next and prev.

------------------------------------------------------------------------------------------------------------------------

* Binary Search Tree - Inorder Depth First Traversal

    - Touching nodes in least to greater order.
    - Algorithm :
        1. Traverse the left subtree.
        2. Visit the root.
        3. Traverse the right subtree.

------------------------------------------------------------------------------------------------------------------------

* Binary Search Tree - Preorder Depth First Traversal

    - Preorder traversal is used to create a copy of the tree.
    - Preorder traversal is also used to get prefix expression on of an expression tree.
    - Algorithm :
        1. Visit the root.
        2. Traverse the left subtree.
        3. Traverse the right subtree.

------------------------------------------------------------------------------------------------------------------------
* Binary Search Tree - Postorder Depth First Traversal

    - Postorder traversal is used to delete the tree.
    - Postorder traversal is also useful to get the postfix expression of an expression tree.
    - Algorithm :
        1. Traverse the left subtree.
        2. Traverse the right subtree.
        3. Visit the root.

------------------------------------------------------------------------------------------------------------------------